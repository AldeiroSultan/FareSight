{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Sulta\\\\Documents\\\\CodingProject\\\\faresight\\\\client\\\\src\\\\contexts\\\\AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\n// client/src/contexts/AuthContext.js\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport api from '../utils/api';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext();\nexport const useAuth = () => {\n  _s();\n  return useContext(AuthContext);\n};\n_s(useAuth, \"gDsCjeeItUuvgOWf1v4qoK9RF6k=\");\nexport const AuthProvider = ({\n  children\n}) => {\n  _s2();\n  const [user, setUser] = useState(null);\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(null);\n  const navigate = useNavigate();\n\n  // Check if user is already logged in\n  useEffect(() => {\n    const checkAuthStatus = async () => {\n      try {\n        setLoading(true);\n        const response = await api.get('/auth/me');\n        if (response.data) {\n          setUser(response.data);\n          setIsAuthenticated(true);\n        }\n      } catch (err) {\n        setUser(null);\n        setIsAuthenticated(false);\n      } finally {\n        setLoading(false);\n      }\n    };\n    checkAuthStatus();\n  }, []);\n\n  // Login function\n  const login = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/login', {\n        email,\n        password\n      });\n      setUser(response.data.user);\n      setIsAuthenticated(true);\n      navigate('/dashboard');\n      return true;\n    } catch (err) {\n      var _err$response, _err$response$data;\n      setError(((_err$response = err.response) === null || _err$response === void 0 ? void 0 : (_err$response$data = _err$response.data) === null || _err$response$data === void 0 ? void 0 : _err$response$data.message) || 'Login failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Register function\n  const register = async userData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.post('/auth/register', userData);\n      setUser(response.data.user);\n      setIsAuthenticated(true);\n      navigate('/dashboard');\n      return true;\n    } catch (err) {\n      var _err$response2, _err$response2$data;\n      setError(((_err$response2 = err.response) === null || _err$response2 === void 0 ? void 0 : (_err$response2$data = _err$response2.data) === null || _err$response2$data === void 0 ? void 0 : _err$response2$data.message) || 'Registration failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Logout function\n  const logout = async () => {\n    try {\n      setLoading(true);\n      await api.post('/auth/logout');\n      setUser(null);\n      setIsAuthenticated(false);\n      navigate('/login');\n    } catch (err) {\n      console.error('Logout error:', err);\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update user profile\n  const updateProfile = async profileData => {\n    try {\n      setLoading(true);\n      setError(null);\n      const response = await api.put('/users/profile', profileData);\n      setUser(prev => ({\n        ...prev,\n        ...response.data.user\n      }));\n      return true;\n    } catch (err) {\n      var _err$response3, _err$response3$data;\n      setError(((_err$response3 = err.response) === null || _err$response3 === void 0 ? void 0 : (_err$response3$data = _err$response3.data) === null || _err$response3$data === void 0 ? void 0 : _err$response3$data.message) || 'Profile update failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Update password\n  const updatePassword = async passwordData => {\n    try {\n      setLoading(true);\n      setError(null);\n      await api.put('/users/password', passwordData);\n      return true;\n    } catch (err) {\n      var _err$response4, _err$response4$data;\n      setError(((_err$response4 = err.response) === null || _err$response4 === void 0 ? void 0 : (_err$response4$data = _err$response4.data) === null || _err$response4$data === void 0 ? void 0 : _err$response4$data.message) || 'Password update failed');\n      return false;\n    } finally {\n      setLoading(false);\n    }\n  };\n\n  // Clear errors\n  const clearError = () => setError(null);\n  const value = {\n    user,\n    isAuthenticated,\n    loading,\n    error,\n    login,\n    register,\n    logout,\n    updateProfile,\n    updatePassword,\n    clearError\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 150,\n    columnNumber: 10\n  }, this);\n};\n_s2(AuthProvider, \"4SPovWl4b8CoUA+S2vkH+DBxSbM=\", false, function () {\n  return [useNavigate];\n});\n_c = AuthProvider;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","useNavigate","api","jsxDEV","_jsxDEV","AuthContext","useAuth","_s","AuthProvider","children","_s2","user","setUser","isAuthenticated","setIsAuthenticated","loading","setLoading","error","setError","navigate","checkAuthStatus","response","get","data","err","login","email","password","post","_err$response","_err$response$data","message","register","userData","_err$response2","_err$response2$data","logout","console","updateProfile","profileData","put","prev","_err$response3","_err$response3$data","updatePassword","passwordData","_err$response4","_err$response4$data","clearError","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/Sulta/Documents/CodingProject/faresight/client/src/contexts/AuthContext.js"],"sourcesContent":["// client/src/contexts/AuthContext.js\r\nimport React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { useNavigate } from 'react-router-dom';\r\nimport api from '../utils/api';\r\n\r\nconst AuthContext = createContext();\r\n\r\nexport const useAuth = () => useContext(AuthContext);\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [user, setUser] = useState(null);\r\n  const [isAuthenticated, setIsAuthenticated] = useState(false);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n  const navigate = useNavigate();\r\n\r\n  // Check if user is already logged in\r\n  useEffect(() => {\r\n    const checkAuthStatus = async () => {\r\n      try {\r\n        setLoading(true);\r\n        const response = await api.get('/auth/me');\r\n        \r\n        if (response.data) {\r\n          setUser(response.data);\r\n          setIsAuthenticated(true);\r\n        }\r\n      } catch (err) {\r\n        setUser(null);\r\n        setIsAuthenticated(false);\r\n      } finally {\r\n        setLoading(false);\r\n      }\r\n    };\r\n\r\n    checkAuthStatus();\r\n  }, []);\r\n\r\n  // Login function\r\n  const login = async (email, password) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await api.post('/auth/login', { email, password });\r\n      \r\n      setUser(response.data.user);\r\n      setIsAuthenticated(true);\r\n      navigate('/dashboard');\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Login failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Register function\r\n  const register = async (userData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await api.post('/auth/register', userData);\r\n      \r\n      setUser(response.data.user);\r\n      setIsAuthenticated(true);\r\n      navigate('/dashboard');\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Registration failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Logout function\r\n  const logout = async () => {\r\n    try {\r\n      setLoading(true);\r\n      \r\n      await api.post('/auth/logout');\r\n      \r\n      setUser(null);\r\n      setIsAuthenticated(false);\r\n      navigate('/login');\r\n    } catch (err) {\r\n      console.error('Logout error:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update user profile\r\n  const updateProfile = async (profileData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      const response = await api.put('/users/profile', profileData);\r\n      \r\n      setUser(prev => ({ ...prev, ...response.data.user }));\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Profile update failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Update password\r\n  const updatePassword = async (passwordData) => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      \r\n      await api.put('/users/password', passwordData);\r\n      \r\n      return true;\r\n    } catch (err) {\r\n      setError(err.response?.data?.message || 'Password update failed');\r\n      return false;\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  // Clear errors\r\n  const clearError = () => setError(null);\r\n\r\n  const value = {\r\n    user,\r\n    isAuthenticated,\r\n    loading,\r\n    error,\r\n    login,\r\n    register,\r\n    logout,\r\n    updateProfile,\r\n    updatePassword,\r\n    clearError\r\n  };\r\n\r\n  return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}